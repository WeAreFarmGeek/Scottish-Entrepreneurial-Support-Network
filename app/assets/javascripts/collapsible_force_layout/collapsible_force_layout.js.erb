$(document).ready(function(){
  var w = $(window).width(),
      h = $(window).height() - 180,
      node,
      link,
      root;

  var selected_node  = null,
      selected_link  = null,
      mousedown_link = null,
      mousedown_node = null,
      mouseup_node   = null;

  var force = d3.layout.force()
      .on("tick", tick)
      .charge(-1000)
      .linkDistance(40)
      .size([w, h]);

  var outer = d3.select("div#collapsible_force_layout").append("svg:svg")
              .attr("width", w)
              .call(d3.behavior.zoom().on("zoom", rescale))
              .attr("height", h)
              .attr("pointer-events", "all");

  var vis = outer.append("svg:g")
    

  d3.json("/admin/organisations/tree.json", function(json) {
    root = json;
    root.x = w / 2;
    root.y = h / 2 - 80;
    update();
  });

    function mousedown() {
        if (!mousedown_mode && !mousedown_link) {
            // allow panning if nothing is selected
            vis.call(d3.behavior.zoom().on("zoom"), rescale);
            return;
        }
    }

    function mousemove() {
        if (!mousedown_node) return;

        // update drag line
        drag_line
            .attr("x1", mousedown_node.x)
            .attr("y1", mousedown_node.y)
            .attr("x2", d3.svg.mouse(this)[0])
            .attr("y2", d3.svg.mouse(this)[1]);
    }

    function mouseup() {
        if (mousedown_node) {
            // hide drag line
            drag_line.attr("class", "drag_line_hidden")
            if (!mouseup_node) {
                // Add node
                var point = d3.mouse(this);
                node = {x: point[0], y: point[1]},
                n = nodes.push(node);

                // select new node
                selected_node = node;
                selected_link = null;

                // add link to mousedown node
                links.push({source: mousedown_node, target: node});
            }
            update();
        }
        resetMouseVars();
    }

    function resetMouseVars() {
        mousedown_node = null;
        mouseup_node   = null;
        mousedown_link = null;
    }

    function rescale() {
        trans = d3.event.translate;
        scale = d3.event.scale;

        vis.attr("transform", "scale(" + scale + ") translate(" + trans + ")"); 
    }

  function update() {
    var nodes = flatten(root),
        links = d3.layout.tree().links(nodes);

    // Restart the force layout.
    force
        .nodes(nodes)
        .links(links)
        .start();

    // Update the links…
    link = vis.selectAll("line.link")
        .data(links, function(d) { return d.target.id; });

    // Enter any new links.
    link.enter().insert("svg:line", ".node")
        .attr("class", "link")
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    // Exit any old links.
    link.exit().remove();

    // Update the nodes…
    node = vis.selectAll("image.node").data(nodes, function(d) { return d.id; });

    // Enter any new nodes.
    node.enter().append("image")
        .attr("class", "node")
        .attr("xlink:href", function(d) { 
          if (d.data.logo.thumb) { return d.data.logo.thumb; }
          return "<%= asset_path('node.png') %>"; 
        }) 
        .attr("x", function(d) { return d.x - 15; })
        .attr("y", function(d) { return d.y - 15; })
        .attr("width", 30)
        .attr("height", 30)
        .call(force.drag)
        .on("mouseover", show_info);

    // Exit any old nodes.
    node.exit().remove();

    // TODO: Find a way to detect what the width and height should be, so 
    //       that we can then define the zoom level and then run this
    //       line in a meaningful way.
    //vis.attr("transform", "scale(1.5) translate(-20, -20)");
  }

  function tick() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node.attr("x", function(d) { return d.x - 15; })
        .attr("y", function(d) { return d.y - 15; });
  }

  // Returns a list of all nodes under the root.
  function flatten(root) {
    var nodes = [], i = 0;

    function recurse(node) {
      if (node.children) node.size = node.children.reduce(function(p, v) { return p + recurse(v); }, 0);
      if (!node.id) node.id = ++i;
      nodes.push(node);
      return node.size;
    }

    root.size = recurse(root);
    return nodes;
  }

    function show_info(d,i) {
        var html = "<div>";
        var name = d.name;

        if (d.data.url && d.data.url.length > 0) { name = "<a href='"+d.data.url+"'>"+name+"</a>"; }

        html += "<h2>" + name + "</h2>";

        if (d.data.logo && d.data.logo.thumb && d.data.logo.thumb.length > 0) {
            html += "<img style='float: left; padding: 5px' src='"+ d.data.logo.thumb +"'/>";
        }

        html += "<p>" + d.data.blurb + "</p>";

        if (d.data.search_types && d.data.search_types.length > 0) {
            html += "<strong>Tags:</strong>";
            html += "<ul>";
            for (var x = 0; x < d.data.search_types.length; x++) {
                html += "<li>";
                html += d.data.search_types[x];
                html += "</li>";
            }
            html += "</ul>";
        }

        html += "</div>";
        $('#infobar').html(html).show();
    }

  function do_filter(contexts) {
    Filters = contexts;

    function find_match(filters, data, d) {
      var match = false;
      var count = 0, filter;

      var output = [];

      $.each(filters, function(i,filter){
        if (filter.length > 1) {
          if (data.indexOf(filter.toLowerCase()) !== -1) {
            match = true;
            output.push("Passed on: "+filter+" vs " +data);
          } else {
            match = false;
            output.push("Failed on: "+filter+" vs " +data);
            return false;
          }
        }
      });

      //if (d) { 
      //  console.log('-------------');
      //  console.log(d.name + " => " + match); 
      //  $.each(output, function(i,v) { console.log(v); });
      //  console.log('-------------');
      //}

      return match;
    };

    var set_width_height = function(d, i){
      var data = _.flatten(d.data.search_types).join(" ").toLowerCase();
      var w = 30;

      if (find_match(Filters, data, d) && d.data.logo.original.indexOf("/node.png") == -1) {
        return w * 2;
      } else {
        return w;
      }
    };
    
    var set_opacity = function(d, i){
      var data = _.flatten(d.data.search_types).join(" ").toLowerCase();
      var a = 1;

      Size = 0;

      $.each(Filters, function(i,v){ Size += v.length; });

      if ((find_match(Filters, data) && d.data.logo.original.indexOf("/node.png") == -1) || Size == 0) {
        return a;
      } else {
        return a/2;
      }
    };

    var set_filter = function(d, i) {
      var data = _.flatten(d.data.search_types).join(" ").toLowerCase();

      var count=0, filter;
      while(filter = Filters[count++]) { Size += filter.length; } 

      if ((find_match(Filters, data) && d.data.logo.original.indexOf("/node.png") == -1) || Size == 0) {
        return "none";
      } else {
        return "grayscale(100%) blur(5px)";
      }
    }

    vis.selectAll('.node')
       .transition()
       .attr( 'width',   set_width_height)
       .attr( 'height',  set_width_height)
       .style('opacity', set_opacity)
       .style('+filter', set_filter);
  }

  // When the text changes on the filter input
  $('select.filter').change(function(){
    Filters = [];
    $.each($('select.filter option:selected'), function(i,v){ Filters.push($(v).val()); });
    do_filter(Filters);
  });

});
